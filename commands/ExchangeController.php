<?php
/**
 * User: moyu
 * Date: 2018/9/20 20:15
 *
 * 代理相关定时任务
 */

namespace app\commands;

use app\common\BankList;
use app\common\helpers\Sms;
use app\models\Exchange;
use app\models\ExchangeRecord;
use app\models\LobbyPlayer;
use Yii;
use yii\base\Curl;
use app\common\Des;
use app\common\Code;


class ExchangeController extends AppController
{
    /** 每分钟读取数量 */
    const READ_COUNT = 100;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->tel = Yii::$app->params['change_bind_modile'];
        $this->redis = Yii::$app->redis_3;
        $this->config = Yii::$app->params['wechat_config'];
    }


    /**
     * 定时处理直兑订单
     *
     */
    public function actionDisposeExchangeOrder()
    {
        Yii::info('定时处理直兑订单开始');

        $exchangeModel = new ExchangeRecord();
        $where['status'] = 0; //订单状态为待处理
        $list = $exchangeModel->getRecord($where);
        Yii::info('未处理直兑订单列表--' . json_encode($list));

        foreach ($list as $key => $val) {
            $type = $val['type'];
            $code = $val['code'];
            $amount = $val['amount'];
            $orderId = $val['order_id'];
            $playerId = $val['player_id'];

            if ($val['status'] == 0) {//未处理的订单
                switch ($type) {
                    case 1:
                        $this->exchangeAli($code, $amount);
                        continue;
                    case 2:
                        $exchange = $this->exchangeBank($val);
                        if ($exchange) {//直兑中
                            $this->updatePayOrderStatus($orderId, Code::EXCHANGING);
                        } else {
                            //直兑失败，回执订单，给玩家把金币加回去，此处等和第三方对接时，视情况而定
                            if($this->updatePayOrderStatus($orderId, Code::EXCHANGE_ERROR,'银行卡直兑下单失败')){
                                $return = $this->disposeGold($playerId, $amount, 1);
                                if ($return['success'] && $return['code'] != 2) {
                                    //回执成功，修改订单状态未回执成功状态（一个单独的键），然后将订单状态修改为直兑失败状态
                                    $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_ERROR_BACK_SUCCESS, Code::RECHECK_PAY_ERROR_BACK_MESSAGE_SUCCESS);
                                } else {
                                    //回执失败，更改订单状态未回执失败状态（一个单独的键），然后将订单状态修改为直兑失败状态
                                    $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_ERROR_BACK_FALSE, Code::RECHECK_PAY_ERROR_BACK_MESSAGE_FALSE);
                                }
                            }else{
                                Yii::info('直兑失败，订单回执失败！orderId:' . $orderId . "--玩家id：" . $playerId);
                            }
                        }
                        continue;
                    case 3:
                        $exchangeRecordModel = new ExchangeRecord();
                        //验证是否超时
                        $checkTimeOut = $exchangeRecordModel->checkIsTimeOut($orderId);
                        if ($checkTimeOut != 1) {
                            if ($checkTimeOut == 2) {//更改订单状态失败
                                $this->addFailPayMoneyList($orderId);
                            }

                            $recordInfo = $exchangeRecordModel->getRecord(['order_id' => $orderId], 'amount,player_id', 2);
                            if ($recordInfo) {
                                $thisAmount = $recordInfo['amount'];
                                $thisPlayerId = $recordInfo['player_id'];
                                Yii::info("订单超时，回滚用户金币：" . $thisAmount . '----' . $thisPlayerId);
                                $this->disposeGold($thisPlayerId, $thisAmount, 1);
                            }

                            continue;
                        }
                        $this->actionPayExchangeMoney();
                        continue;
                    default:
                        continue;
                }
            }
        }
    }


    /**
     * 支付宝直兑
     *
     * @param $code -支付宝账号
     * @param $amount - 提现金额
     */
    public function exchangeAli($code, $amount)
    {
        return true;
    }

    /**
     * 银行卡直兑
     *
     * @param $code -银行卡号
     * @param $amount - 提现金额
     * 注意   关于网站编码问题 请注意，我司接口编码为gb2312 如涉及编码问题  请根据   iconv 和 urlencode 请在传递参数时 进行相应的转码
     * 例：    urlencode(iconv("UTF-8","gb2312//IGNORE",$goods_name)) urlencode($goods_name)
     */
    public function exchangeBank($data)
    {
        if (is_array($data) && !empty($data)) {
            //查询卡号对应第三方的银行卡信息
            $cardInfo = (array)$this->actionCardBin($data['code']);
            $exchangeModel = new Exchange();
            $bindInfo = $exchangeModel->getOne($data['player_id'],2);

            $bankConfig = Yii::$app->params['exchange_config']['bank_hfb'];
            $amount = ($data['amount']-$data['service_charge'])/100;//扣除手续费
//            $amount = 1;//测试写死

            $key = $bankConfig['md5_key'];//md5加密密钥
            $keyDes = $bankConfig['des_key'];//des加密密钥
            $notify_url = $bankConfig['notify_url'];//回调地址
            $answer = $bankConfig['answer'];//付款理由
            $agent_id = $bankConfig['agent_id'];//商户号

            $batch_num = 1;//该次付款总笔数
            $version = 3;//当前接口版本号3
            $batch_no = $data['order_id'];//商户订单id
            $batch_amt = $amount;//订单数额.转元

            $ext_param1 = md5(rand(1,10));//自生成密钥，存redis
            $redis = Yii::$app->redis_4;
            $redis->set($ext_param1,1);

            $billNo = $data['id'];//商户流水号
            $bankNo = $cardInfo['bank_type'];//银行编号

            $toWho = 0;//对公:1 对私:0 默认为私
            $bankCardNum = $data['code'];//收款人帐号
            $idCardName = $bindInfo['name'];//收款人姓名

            //商户流水号^银行编号^对公对私^收款人帐号^收款人姓名^付款金额^付款理由^省份^城市^收款支行名称
            $detail_data = $billNo . "^" . $bankNo . "^" . $toWho . "^" . $bankCardNum . "^" . $idCardName . "^" . $batch_amt . "^" . $answer . "^" . "北京直辖市" . "^" . "海淀区" . "^" . "招商银行";

            //组织签名
            $signStr = '';
            $signStr = $signStr . 'agent_id=' . $agent_id;
            $signStr = $signStr . '&batch_amt=' . $batch_amt;
            $signStr = $signStr . '&batch_no=' . $batch_no;
            $signStr = $signStr . '&batch_num=' . $batch_num;
            $signStr = $signStr . '&detail_data=' . $detail_data;
            $signStr = $signStr . '&ext_param1=' . $ext_param1;
            $signStr = $signStr . '&key=' . $key;
            $signStr = $signStr . '&notify_url=' . $notify_url;
            $signStr = $signStr . '&version=' . $version;

            $rep = new Des (); //初始化一个对象
            $rep->key = $keyDes;

            $detail_data = iconv("utf-8", "gbk//IGNORE", $detail_data);
            $detail_data_des = $rep->encrypt($detail_data);

            //获取sign密钥
            $sign = md5(strtolower($signStr));

            $postData['version'] = $version;
            $postData['agent_id'] = $agent_id;
            $postData['batch_no'] = $batch_no;
            $postData['batch_amt'] = $batch_amt;
            $postData['batch_num'] = $batch_num;
            $postData['detail_data'] = $detail_data_des;
            $postData['notify_url'] = $notify_url;
            $postData['ext_param1'] = $ext_param1;
            $postData['sign'] = $sign;

            $Curl = new Curl();
            $Curl->setPostParams($postData);
            $res = $Curl->post($bankConfig['request_url']);

            $data = (array) simplexml_load_string(utf8_encode($res));

            if($data['ret_code'] == '0000'){
                return true;
            }

        }

        return false;
    }

    /**
     * 汇付宝提供卡BIN查询（银行卡归属地查询）
     * 参数实例 ：version=3&agent_id=1664502&bank_card_no=6214851201404626&sign=98eb33a125024c048955095bc229d450
     * sign 规则 sign=md5(agent_id=1664502&bank_card_no=6214851201404626&key=CC08C5E3E69F4E6B85F1DC0B&version=3)
     */
    public function actionCardBin($card = 0)
    {
        if (!$card) { return false; }

        $bankConfig = Yii::$app->params['exchange_config']['bank_hfb'];

        $url = $bankConfig['BIN_chekc_url'];

        $signStr = 'agent_id='.$bankConfig['agent_id'].'&bank_card_no='.$card.'&key='.$bankConfig['md5_key'].'&version=3';
        $sign = md5(strtolower($signStr));

        $requestParamStr = "version=3&agent_id=".$bankConfig['agent_id']."&bank_card_no=".$card."&sign=".$sign;
        $requestUrl = $url . '?' . $requestParamStr;

        $curl = new Curl();
        $res = $curl->get($requestUrl);
        $data = simplexml_load_string(utf8_encode($res));

        if (!$data) {
            Yii::info("请求银行卡归属地失败：" . $res);
            return false;
        }

        return $data;
    }

    /**
     * 处理微信直兑预下单（redis中存的待提交到微信参数字符串）
     */
    public function actionPayExchangeMoney()
    {
        Yii::info("处理微信直兑预下单");
        $redis = $this->redis;
        for ($i = 0; $i < self::READ_COUNT; $i++) {
            $payInfo = $redis->rpop($this->config['PAY_EXCHANGE_MONEY']);
            if (!$payInfo) {
                break;
            }

            $vars = json_decode($payInfo, 1);
            $exchangeRecordModel = new ExchangeRecord();

            //效验订单是否有效
            if (!$exchangeRecordModel->checkOrderIsCanUse($vars['partner_trade_no'])) {
                continue;
            }

            ksort($vars);
            Yii::info("请求微信数据：" . json_encode($vars));
            $data = $this->curl_post_ssl($this->config['RECHARGE_API'], $vars);

            if (!$data) {
                Yii::info("微信通信失败，未正确返回：" . json_encode($data));
                $this->updatePayOrderStatus($vars['partner_trade_no'], Code::RECHECK_PAY_STATUS, Code::MUTUAL_FILE_WITH_WECHAT);
                $this->addFailPayMoneyList($vars['partner_trade_no']);
            }

            $this->disposeOrder($data, $vars['partner_trade_no']);
        }
    }

    /**
     * 根据微信返回结果处理直兑订单
     *
     * @param $data
     * @param $orderId
     */
    public function disposeOrder($data, $orderId)
    {
        $result = (array)simplexml_load_string($data, 'SimpleXMLElement', LIBXML_NOCDATA);

        Yii::info('微信返回结果：curl_data:' . $data);
        $db = Yii::$app->db;
        if ($result['return_code'] == 'SUCCESS') {//通信成功
            if ($result['result_code'] == 'SUCCESS') {//成功更改订单状态
                $payInfo = $this->getOrderDetail($result['partner_trade_no']);
                Yii::info('提现微信返回成功：订单信息:' . json_encode($payInfo));

                $re_1 = $this->updatePayOrderStatus($result['partner_trade_no'], Code::SUCCESS_PAY_STATUS, Code::SUCCESS_PAY_MESSAGE);
                Yii::info('更新订单状态结果：' . json_encode($re_1));
                if (!$re_1) {
                    $re_1 ? null : $this->updatePayOrderStatus($result['partner_trade_no'], Code::RECHECK_PAY_STATUS, Code::ERROR_FALSE_UPDATE_ORDER_MESSAGE);
                }
            } else if ($result['err_code'] == 'NOTENOUGH') {//余额不足
                Yii::info("商户号余额不足");
                $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_STATUS, Code::NOTENOUGH_FALSE_MINUS_FORZEN_MSEEAGE);
                Sms::send($this->tel, '提现账户余额不足,程序已自动退出【一拳娱乐】');
            } else {//业务结果未明确,查询订单状态
                Yii::info("提现订单状态未明确，加入失败队列重新查询");
                $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_STATUS, Code::RECHECK_PAY_MESSAGE);
                $this->addFailPayMoneyList($orderId);
            }
        } else {//通信失败
            Yii::info('通信失败！');
        }
    }

    /**
     * 失败提现订单定时任务
     */
    public function actionDealExchangeFailOrder()
    {
        Yii::info("定时处理失败订单！");
        for ($i = 0; $i < self::READ_COUNT; $i++) {
            $order_id = $this->redis->rpop($this->config['FAIL_PAY_EXCHANGE_MONEY']);
            if (!$order_id) {
                break;
            }
            $info = $this->getOrderDetail($order_id);
            if ($info['status'] == Code::SUCCESS_PAY_STATUS) {
                continue;
            }

            $this->dealFailOrder($order_id);
        }
    }

    /**
     * 订单失败处理
     *
     * @param $order_id
     */
    public function dealFailOrder($order_id)
    {
        Yii::info('向微信确实失败订单！开始');
        $new_data['partner_trade_no'] = $order_id;
        $new_data['mch_id'] = $this->config['MCHID'];
        $new_data['appid'] = $this->config['MCH_APPID'];
        $new_data['nonce_str'] = 'yiquan' . mt_rand(100, 999);

        //生成秘钥
        $str = 'appid=' . $new_data["appid"] . '&mch_id=' . $new_data["mch_id"] . '&nonce_str=' . $new_data["nonce_str"] . '&partner_trade_no=' . $new_data["partner_trade_no"] . '&key=' . $this->config['API_KEY'];
        $sign = strtoupper(md5($str));//md5加密 转换成大写
        $new_data["sign"] = $sign;//签名
        Yii::info('请求微信查询订单数据：' . json_encode($new_data));

        $url = $this->config['SEE_ORDER_API'];

        $new_data = $this->arrayToXml($new_data);
        $ch = curl_init();

        //超时时间　　
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL, $this->config['SEE_ORDER_API']);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

        /******* 此处必须为文件服务器根目录绝对路径 不可使用变量代替*********/
        curl_setopt($ch, CURLOPT_SSLKEY, "/data/wwwroot/yiquan/credential/apiclient_key.pem");
        curl_setopt($ch, CURLOPT_SSLCERT, "/data/wwwroot/yiquan/credential/apiclient_cert.pem");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $new_data);

        $checkResult = curl_exec($ch);

        Yii::info('微信查询订单返回：' . $checkResult);
        $this->disposeFileOrder($order_id, $checkResult);
    }

    /**
     * 订单失败处理
     *
     * @param $order_id
     * @param $checkResult
     */
    public function disposeFileOrder($order_id, $checkResult)
    {
        Yii::info("开始处理失败订单！");
        try{
            $checkResult = (array)simplexml_load_string($checkResult, 'SimpleXMLElement', LIBXML_NOCDATA);
            if ($checkResult['return_code'] == 'SUCCESS') {
                if ($checkResult['result_code'] == 'SUCCESS') {
                    if ($checkResult['status'] == 'SUCCESS') {//更新订单状态
                        Yii::info("处理失败订单，订单成功，更新订单状态");
                        $this->updateOrderStatus($order_id);

                    } else if ($checkResult['status'] == 'FAILED') {//支付失败，更改订单状态,回滚用户金币
                        Yii::info("处理失败订单，回滚用户金币");
                        $this->updatePayOrderStatus($order_id, Code::RECHECK_PAY_ERROR_BACK, Code::RECHECK_PAY_ERROR_BACK_MESSAGE);
                        $this->actionGoBackPlayerGold($order_id);

                    } else if ($checkResult['status'] == 'PROCESSING') {//处理中
                        Yii::info("处理失败订单，直兑中");
                        if((time()-strtotime($checkResult['transfer_time'])) > 86400*3){
                            $this->actionGoBackPlayerGold($order_id);
                            $this->updatePayOrderStatus($order_id, 1010, '直兑失败，回滚用户金币');
                        }else{
                            $this->updatePayOrderStatus($order_id,Code::EXCHANGING,'处理中');
                            $this->addFailPayMoneyList($order_id);
                        }
                    } else {
                        Yii::info("直兑失败，微信返回错误，回滚金币--");
                        $this->updatePayOrderStatus($order_id, Code::EXCHANGE_ERROR, '直兑失败1，回滚用户金币');
                        $this->actionGoBackPlayerGold($order_id);
                    }

                } else if ($checkResult['result_code'] == 'FAIL') {//失败，再次加入失败队列
                    if ($checkResult['err_code'] == 'SYSTEMERROR') {
                        Yii::info("处理失败订单，再次加入失败队列");
                        $this->updatePayOrderStatus($order_id, Code::RECHECK_PAY_STATUS, $checkResult['err_code_des']);
                        $this->addFailPayMoneyList($order_id);
                    } elseif ($checkResult['err_code'] == "NOT_FOUND") {
                        Yii::info("处理失败，回滚用户金币");
                        $this->updatePayOrderStatus($order_id, Code::RECHECK_PAY_STATUS, '回滚用户金币');
                        $this->actionGoBackPlayerGold($order_id);
                    } else {
                        Yii::info("直兑失败，微信返回错误，回滚金币--" . $checkResult['err_code']);
                        $this->updatePayOrderStatus($order_id, Code::EXCHANGE_ERROR, '直兑失败2，回滚用户金币');
                        $this->actionGoBackPlayerGold($order_id);
                    }
                } else {
                    Yii::info($checkResult, '重查结果状态未知---' . $checkResult['result_code']);
                    $this->updatePayOrderStatus($order_id, Code::EXCHANGE_ERROR, '直兑失败3，回滚用户金币');
                    $this->actionGoBackPlayerGold($order_id);
                }
            }else{
                Yii::info("微信返回状态异常--".json_encode($checkResult));
                $this->updatePayOrderStatus($order_id, Code::EXCHANGE_ERROR, '直兑失败4，微信返回状态异常');
            }
        }catch (\Exception $e){
            Yii::info("微信返回空，添加到失败队列");
            $this->addFailPayMoneyList($order_id);
        }
    }

    /**
     * 获取订单详情
     */
    private function getOrderDetail($order_id)
    {
        $exchangeRecordModel = new ExchangeRecord();
        $recordInfo = $exchangeRecordModel->getRecord(['order_id' => $order_id], "*", 2);

        return $recordInfo;
    }

    /**
     * 更新订单状态
     *
     * @param $order_id
     * @param $status
     * @param string $remark
     * @param string $reason
     * @return bool|int
     */
    private function updatePayOrderStatus($order_id, $status, $remark = '', $reason = '')
    {
        Yii::info("更新订单状态!");
        $exchangeRecordModel = new ExchangeRecord();
        $data = ['status' => $status, 'finish_time' => date('Y-m-d H:i:s'), 'memo' => $remark . '.' . $reason];
        $res = $exchangeRecordModel->updateRecordInfo($order_id, $data);

        return $res;
    }

    /**
     * 查询支付成功 更新订单状态
     *
     * @param $order_id
     * @return bool
     */
    private function updateOrderStatus($order_id)
    {
        $order_data = $this->getOrderDetail($order_id);
        if ($order_data['status'] == Code::SUCCESS_PAY_STATUS) {
            Yii::info('订单已经支付成功，不能重复操作！');
            return false;
        }

        Yii::info('更新订单状态！');
        if ($this->updatePayOrderStatus($order_id, Code::SUCCESS_PAY_STATUS, Code::SUCCESS_PAY_MESSAGE)) {
            return true;
        }

        return false;
    }

    private function addFailPayMoneyList($order_id)
    {
        Yii::info('加入失败队列');
        Yii::$app->redis->lpush($this->config['FAIL_PAY_EXCHANGE_MONEY'], $order_id);
    }

    /**
     * 直兑失败，回滚用户金币
     *
     * @param $orderId
     */
    public function actionGoBackPlayerGold($orderId)
    {
        Yii::info("回滚金币：orderId--" . $orderId);

        $exchangeRecordModel = new ExchangeRecord();
        $recordInfo = $exchangeRecordModel->getRecord(['order_id' => $orderId], "*", 2);
        if (!$recordInfo) {
            Yii::info("回滚订单不存在！----" . $orderId);
            return false;
        }

        $playerId = $recordInfo['player_id'];
        $amount = $recordInfo['amount'];

        $result = $this->disposeGold($playerId, $amount, 1);
        if (!isset($result['code'])) {
            Yii::info("通知data服加钱失败1！返回值：" . json_encode($result));
            $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_ERROR_BACK_FALSE, Code::RECHECK_PAY_ERROR_BACK_MESSAGE_FALSE);
        }

        if ($result['success'] && $result['code'] != 2) {//回滚成功
            Yii::info("回滚订单成功！----" . $orderId);
            $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_ERROR_BACK_SUCCESS, Code::RECHECK_PAY_ERROR_BACK_MESSAGE_SUCCESS);
        } else {
            Yii::info("通知data服加钱失败2！返回值：" . json_encode($result));
            $this->updatePayOrderStatus($orderId, Code::RECHECK_PAY_ERROR_BACK_FALSE, Code::RECHECK_PAY_ERROR_BACK_MESSAGE_FALSE);
        }

    }

    /**
     * 数组转xml
     *
     * @param $arr
     * @return string
     */
    public function arrayToXml($arr)
    {
        $xml = "<xml>";
        foreach ($arr as $key => $val) {
            $xml .= "<" . $key . ">" . $val . "</" . $key . ">";
        }
        $xml .= "</xml>";
        return $xml;
    }

    /**
     * 作用：使用证书，以post方式提交xml到对应的接口url
     *
     * @param $url
     * @param $vars
     * @param int $second
     * @return bool|mixed
     */
    public function curl_post_ssl($url, $vars, $second = 30)
    {
        $vars_ = $this->arrayToXml($vars);
        Yii::info('提交给微信的xml---' . $vars_);
        $ch = curl_init();
        //超时时间　　
        curl_setopt($ch, CURLOPT_TIMEOUT, $second);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

        /******* 此处必须为文件服务器根目录绝对路径 不可使用变量代替*********/
        curl_setopt($ch, CURLOPT_SSLKEY, "/data/wwwroot/yiquan/credential/apiclient_key.pem");
        curl_setopt($ch, CURLOPT_SSLCERT, "/data/wwwroot/yiquan/credential/apiclient_cert.pem");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $vars_);
        $data = curl_exec($ch);

        curl_close($ch);
        return $data;

    }


    /**
     * 处理超时的微信的直兑订单
     *
     */
    public function actionTimeOutOrder()
    {
        //待定，暂时和发钱方法放到一起
    }
}