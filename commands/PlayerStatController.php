<?php
/**
 * User: SeaReef
 * Date: 2018/12/3 14:12
 */
namespace app\commands;

use app\common\RedisKey;
use Yii;
use yii\db\Query;
use app\models\Channel;

class PlayerStatController extends BaseController
{
    /**
     * 每日用户数据统计
     * @params start_time 统计开始时间
     * @params end_time 统计结束时间
     */
    public function actionBaseInfo($start_time = '', $end_time = '',$channel_id=1)
    {
        $start_time = $start_time ? : date('Y-m-d 00:00:00', time() - 86400);
        $end_time = $end_time ? : date('Y-m-d 23:59:59', time() - 86400);
        $stat_date = date('Y-m-d', strtotime($start_time));
        $table = 'stat_base_player';

        $under_list = $this->getChannelUnderList($channel_id);

//        扫码用户
        $regist = (new Query())
            ->from('t_player_member')
            ->where(['and', "bind_time >= '{$start_time}'", "bind_time <= '{$end_time}'"])
            ->andFilterWhere(['in', 'player_id', $under_list])
            ->count();
//        计算DNU
        $dnu = (new Query())
            ->from('login_db.t_lobby_player')
            ->where(['and', "reg_time >= '{$start_time}'", "reg_time <= '{$end_time}'"])
            ->andFilterWhere(['in', 'u_id', $under_list])
            ->count('DISTINCT u_id');

//        计算活跃
        $dau = (new Query())
            ->from('login_db.t_login')
            ->where(['and', "create_time >= '{$start_time}'", "create_time <= '{$end_time}'"])
            ->andFilterWhere(['in', 'player_id', $under_list])
            ->count('DISTINCT player_id');

//        总用户数量
        $all_user = (new Query())
            ->from('login_db.t_lobby_player')
            ->where("reg_time < '{$end_time}'")
            ->andFilterWhere(['in', 'u_id', $under_list])
            ->count();

        $db = Yii::$app->db;
        $sql = "INSERT INTO $table (`channel_id`, `stat_date`, `regist`, `dnu`, `dau`, `all_user`) VALUES($channel_id, '{$stat_date}', '{$regist}', '{$dnu}', '{$dau}', '{$all_user}') ON DUPLICATE KEY UPDATE regist = '{$regist}', dnu = '{$dnu}', dau = '{$dau}', all_user = '{$all_user}'";
//        file_put_contents('/tmp/player_stat.log', print_r([$sql], 1), FILE_APPEND);

        $db->createCommand($sql)->execute();
    }

    public function actionPollChannel()
    {
        parent::actionPollChannel(); // TODO: Change the autogenerated stub
    }


    /**
     * 每日留存计算
     * @params start_time 统计开始时间
     * @params end_time 统计结束时间
     */
    public function actionRu($start_time = '', $end_time = '',$channel_id=1)
    {
        $start_time = $start_time ? : date('Y-m-d 00:00:00', time() - 86400);
        $end_time = $end_time ? : date('Y-m-d 23:59:59', time() - 86400);
        $t = $this->reckon($start_time);
        $db = Yii::$app->db;

        $under_list = $this->getChannelUnderList($channel_id);
        $underListStr = implode(',',$under_list);
	$filterWhere = '';
	if($underListStr){
	   $filterWhere = 'AND player_id in('.$underListStr.')';
	}
        foreach ($t as $k => $v) {
            $sql = "SELECT COUNT(DISTINCT player_id) FROM login_db.t_login WHERE create_time >= '{$start_time}' AND create_time <= '{$end_time}' $filterWhere AND player_id IN (SELECT u_id FROM login_db.t_lobby_player WHERE reg_time >= '{$v['start']}' AND reg_time <= '{$v['end']}')";
//            file_put_contents('/tmp/player_stat.log', print_r([$sql], 1), FILE_APPEND);
            $c = $db->createCommand($sql)->queryScalar();
            $sql = "INSERT INTO stat_base_player (channel_id, stat_date, `{$k}`) VALUES ($channel_id, '{$v['stat']}', '{$c}') ON DUPLICATE KEY UPDATE  `{$k}` = {$c}";

            $db->createCommand($sql)->execute();
        }
    }

    public function actionPollChannelRu(){
        $channelModel = new Channel();
        $channelList = $channelModel->getDataByCon($con=[]);

        foreach ($channelList as $key=>$val){
            $this->actionRu('','',$val['channel_id']);
        }
    }

    /**
     * 获取留存统计天数
     */
    private function reckon($start_time)
    {
        $ts = strtotime($start_time);
        return [
            'ru_1' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400),
                'end' => date('Y-m-d 23:59:59', $ts - 86400),
                'stat' => date('Y-m-d', $ts - 86400),
            ],
            'ru_2' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 2),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 2),
                'stat' => date('Y-m-d', $ts - 86400 * 2),
            ],
            'ru_3' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 3),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 3),
                'stat' => date('Y-m-d', $ts - 86400 * 3),
            ],
            'ru_4' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 4),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 4),
                'stat' => date('Y-m-d', $ts - 86400 * 4),
            ],
            'ru_5' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 5),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 5),
                'stat' => date('Y-m-d', $ts - 86400 * 5),
            ],
            'ru_6' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 6),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 6),
                'stat' => date('Y-m-d', $ts - 86400 * 6),
            ],
            'ru_7' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 7),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 7),
                'stat' => date('Y-m-d', $ts - 86400 * 7),
            ],
            'ru_14' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 14),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 14),
                'stat' => date('Y-m-d', $ts - 86400 * 14),
            ],
            'ru_30' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 30),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 30),
                'stat' => date('Y-m-d', $ts - 86400 * 30),
            ],
            'ru_60' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 60),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 60),
                'stat' => date('Y-m-d', $ts - 86400 * 60),
            ],
        ];
    }

    /**
     * 代理新增统计
     * @params stat_date
     */
    public function actionAgentAdd($start_time = '', $end_time = '')
    {
        $start_time = $start_time ? : date('Y-m-d 00:00:00', time() - 86400 * 30);
        $end_time = $end_time ? : date('Y-m-d 00:00:00', time());
        $ts_time = date('Ymd', strtotime($start_time));

        $data = (new Query())
            ->select(['parent_id', 'COUNT(*) AS `cnt`'])
            ->from('t_player_member')
            ->where(['and', "bind_time >= '{$start_time}'", "bind_time < '{$end_time}'"])
            ->groupBy('parent_id')
            ->all();
//        var_dump($data);

        foreach ($data as $k => $v) {
            $data[$k]['player_id'] = $v['parent_id'];
            $data[$k]['player_nickname'] = (new Query())->select('name')->from('t_daili_player')->where(['player_id' => $v['parent_id']])->scalar();
            $data[$k]['parent_id'] = (new Query())->select('parent_id')->from('t_player_member')->where(['player_id' => $v['parent_id']])->scalar();
            $data[$k]['parent_nickname'] = $data[$k]['parent_id'] == 999 ? '系统' : (new Query())->select('name')->from('t_daili_player')->where(['player_id' => $data[$k]['parent_id']])->scalar() ? : '散户';
            $data[$k]['top_id'] = $this->top($v['parent_id']);
            $data[$k]['top_nickname'] = $data[$k]['top_id'] == -1 ? '散户' : $data[$k]['top_id'] == 999 ? '系统' : (new Query())->select('name')->from('t_daili_player')->where(['player_id' => $data[$k]['top_id']])->scalar();

//            新增id
            $id_list = (new Query())->select('player_id')->from('t_player_member')->where(['and', "parent_id = '{$v['parent_id']}'", "bind_time >= '{$start_time}'", "bind_time < '{$end_time}'"])->column();
//            日新增玩家
            $data[$k]['add_agent'] = (new Query())->from('t_daili_player')->where(['in', 'player_id', $id_list])->count();
            $data[$k]['add_user'] = $v['cnt'] - $data[$k]['add_agent'];

            $redis = Yii::$app->redis;

//            新增直属业绩
            $sum = 0;
            if (!empty($id_list)) {
                foreach ($id_list as $v) {
                    $sum += $redis->hget(RedisKey::INF_DAY_CONSUME . $ts_time, $v);
                }
                $data[$k]['new_consume'] = $sum;
            }

//            直属业绩
            $id_list = (new Query())->select('player_id')->from('t_player_member')->where("parent_id = '{$v['parent_id']}'")->column();
            $sum = 0;
            if (!empty($id_list)) {
                foreach ($id_list as $v) {
                    $sum += $redis->hget(RedisKey::INF_DAY_CONSUME . $ts_time, $v);
                }
                $data[$k]['consume'] = $sum;
            }
        }

        $db = Yii::$app->db;
        $info = $db->createCommand()->insert('stat_agent_add', $data)->execute();
        if (!$info) {
            Yii::info($data, '代理新增统计');
        }
    }

    /**
     * 求玩家顶级上司
     */
    private function top($player_id)
    {
        $db = Yii::$app->db;
        $data = $db->createCommand("SELECT player_id, parent_id FROM t_player_member WHERE player_id = '{$player_id}'")->queryOne();
        if ($data == false) {
            return -1;
        }
        if ($data['parent_id'] == '999') {
            return $data['player_id'];
        } else {
            return $this->top($data['parent_id']);
        }
    }

    /**
     * 用户LTV计算
     */
    public function actionBaseLtv($start_time = '', $end_time = '',$channel_id=1)
    {
        $start_time = $start_time ? : date('Y-m-d 00:00:00', time() - 86400);
        $end_time = $end_time ? : date('Y-m-d 23:59:59', time() - 86400);
        $stat_date = date('Y-m-d', strtotime($start_time));
        $table = 'stat_base_ltv';

        $under_list = $this->getChannelUnderList($channel_id);

        $regist = (new Query())
            ->from('login_db.t_lobby_player')
            ->where(['and', "reg_time >= '{$start_time}'", "reg_time <= '{$end_time}'"])
            ->andFilterWhere(['in', 'u_id', $under_list])
            ->count();

        $db = Yii::$app->db;
        $sql = "INSERT INTO $table (`channel_id`, `stat_date`, `regist`) VALUES($channel_id, '{$stat_date}', '{$regist}') ON DUPLICATE KEY UPDATE regist = '{$regist}'";
        $db->createCommand($sql)->execute();
    }

    public function actionPollChannelLtv(){
        $channelModel = new Channel();
        $channelList = $channelModel->getDataByCon($con=[]);

        foreach ($channelList as $key=>$val){
            $this->actionBaseLtv('','',$val['channel_id']);
        }
    }

    /**
     * 更新ltv信息
     */
    public function actionCu($start_time = '', $end_time = '',$channelId=1)
    {
        $start_time = $start_time ? : date('Y-m-d 00:00:00', time() - 86400);
        $end_time = $end_time ? : date('Y-m-d 23:59:59', time() - 86400);
        $t = $this->consume_date($start_time);
        $d = date('Ymd', strtotime($start_time));
        $db = Yii::$app->db;

        $under_list = $this->getChannelUnderList($channelId);
        $filterWhere='';
        if($under_list){
            $underListStr = implode(',',$under_list);
            $filterWhere = "player_id IN ($underListStr) AND";
        }

        foreach ($t as $k => $v) {
            $sql = "SELECT ROUND(SUM(num) / 100 * 0.5, 2) FROM `t_gold_record__{$d}` WHERE $filterWhere player_id IN (SELECT u_id FROM login_db.t_lobby_player WHERE reg_time >= '{$v['start']}' AND reg_time <= '{$v['end']}')";
            $c = $db->createCommand($sql)->queryScalar() ? : 0;

            $sql = "INSERT INTO stat_base_ltv (channel_id, stat_date, `{$k}`, `ltv`) VALUES($channelId, '{$v['stat']}', '{$c}', `ltv` + '{$c}') ON DUPLICATE KEY UPDATE `{$k}` = {$c}, `ltv` = `ltv` + '{$c}'";
//            echo $sql . "\r\n";
            $db->createCommand($sql)->execute();

            $key = $k . '_avg';
//            $sql = "INSERT INTO stat_base_ltv (channel_id, stat_date, `{$key}`) VALUES (1, '{$v['stat']}', `ltv` / regist) ON DUPLICATE KEY UPDATE `{$key}` = `ltv` / `regist`";
            $sql = "UPDATE stat_base_ltv SET `{$key}` = (`ltv` / `regist`) / '{$v['div']}' WHERE stat_date = '{$v['stat']}'";
//            echo $sql . "\r\n";
            $db->createCommand($sql)->execute();
        }
    }

    public function actionPollChannelCu(){
        $channelModel = new Channel();
        $channelList = $channelModel->getDataByCon($con=[]);

        foreach ($channelList as $key=>$val){
            $this->actionCu('','',$val['channel_id']);
        }
    }

    /**
     * 获取消耗统计天数
     */
    private function consume_date($start_time)
    {
        $ts = strtotime($start_time);
        return [
            'c_0' => [
                'start' => date('Y-m-d 00:00:00', $ts),
                'end' => date('Y-m-d 23:59:59', $ts),
                'stat' => date('Y-m-d', $ts),
                'ts_stat' => date('Ymd', $ts),
                'div' => 1,
            ],
            'c_1' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400),
                'end' => date('Y-m-d 23:59:59', $ts - 86400),
                'stat' => date('Y-m-d', $ts - 86400),
                'ts_stat' => date('Ymd', $ts - 86400),
                'div' => 2,
            ],
            'c_2' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 2),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 2),
                'stat' => date('Y-m-d', $ts - 86400 * 2),
                'ts_stat' => date('Ymd', $ts - 86400 * 2),
                'div' => 3,
            ],
            'c_3' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 3),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 3),
                'stat' => date('Y-m-d', $ts - 86400 * 3),
                'ts_stat' => date('Ymd', $ts - 86400 * 3),
                'div' => 4,
            ],
            'c_4' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 4),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 4),
                'stat' => date('Y-m-d', $ts - 86400 * 4),
                'ts_stat' => date('Ymd', $ts - 86400 * 4),
                'div' => 5,
            ],
            'c_5' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 5),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 5),
                'stat' => date('Y-m-d', $ts - 86400 * 5),
                'ts_stat' => date('Ymd', $ts - 86400 * 5),
                'div' => 6,
            ],
            'c_6' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 6),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 6),
                'stat' => date('Y-m-d', $ts - 86400 * 6),
                'ts_stat' => date('Ymd', $ts - 86400 * 6),
                'div' => 7,
            ],
            'c_7' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 7),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 7),
                'stat' => date('Y-m-d', $ts - 86400 * 7),
                'ts_stat' => date('Ymd', $ts - 86400 * 7),
                'div' => 8,
            ],
            'c_8' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 8),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 8),
                'stat' => date('Y-m-d', $ts - 86400 * 8),
                'ts_stat' => date('Ymd', $ts - 86400 * 8),
                'div' => 9,
            ],
            'c_9' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 9),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 9),
                'stat' => date('Y-m-d', $ts - 86400 * 9),
                'ts_stat' => date('Ymd', $ts - 86400 * 9),
                'div' => 10,
            ],
            'c_10' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 10),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 10),
                'stat' => date('Y-m-d', $ts - 86400 * 10),
                'ts_stat' => date('Ymd', $ts - 86400 * 10),
                'div' => 11,
            ],
            'c_14' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 14),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 14),
                'stat' => date('Y-m-d', $ts - 86400 * 14),
                'ts_stat' => date('Ymd', $ts - 86400 * 14),
                'div' => 12,
            ],
            'c_30' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 30),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 30),
                'stat' => date('Y-m-d', $ts - 86400 * 30),
                'ts_stat' => date('Ymd', $ts - 86400 * 30),
                'div' => 13,
            ],
            'c_60' => [
                'start' => date('Y-m-d 00:00:00', $ts - 86400 * 60),
                'end' => date('Y-m-d 23:59:59', $ts - 86400 * 60),
                'stat' => date('Y-m-d', $ts - 86400 * 60),
                'ts_stat' => date('Ymd', $ts - 86400 * 60),
                'div' => 14,
            ],
        ];
    }
}
