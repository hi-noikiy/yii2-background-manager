<?php
/**
 * User: SeaReef
 * Date: 2018/6/12 11:17
 */
namespace app\controllers;

use app\common\Code;
use app\common\RedisKey;
use app\models\PlayerMember;
use yii;
use yii\web\Controller;
use app\common\helpers\Sms;
use app\models\DailiPlayer;
use app\common\DailiCalc;

class BaseController extends Controller
{
    protected $session;

    /**
     * 消耗返利比例1：110
     */
    const REBATE_RATIO = 110;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $session = Yii::$app->session;
//        $my_user = $session->set('user_id','30773780');
        $this->session = Yii::$app->session;
    }

    /**
     * 验证请求参数
     * @param int $type 0不做限制 1必须是post 2必须是get
     */
    public function checkRequestWay($type=0){
        switch ($type){
            case 0:
                return $_REQUEST;
                break;
            case 1:
                if(Yii::$app->request->isPost)
                    if(Yii::$app->request->post())
                        return Yii::$app->request->post();
                break;
            case 2:
                if(Yii::$app->request->isGet)
                    if(Yii::$app->request->get())
                        return Yii::$app->request->get();
                break;
            default:
                return array();
                break;
        }

        return false;
    }

    /**
     * 返回layui表格数据
     */
    protected function writeLayui($code = Code::CODE_OK, $msg = '', $count, $data)
    {
        echo json_encode([
            'code' => $code,
            'msg' => $msg ?: Code::$CODE_MESSAGES[$code],
            'count' => $count,
            'data' => $data
        ]);
        die();
    }

    protected function writeResult($code = Code::CODE_OK, $msg = '',$data='')
    {
        echo json_encode([
            'code' => $code,
            'msg' => $msg ? : Code::$CODE_MESSAGES[$code],
            'data' => $data,
        ]);
        exit();
    }

    protected function writeJson($data)
    {
        echo json_encode($data);
        exit();
    }
    /**
     * 判断多维数组(二维或以上)是否存在值
     *
     * @param $value
     * @param $array
     * @return bool
     */
    public  function deep_in_array($value, $array) {
        foreach($array as $item) {
            if(!is_array($item)) {
                if ($item == $value) {
                    return true;
                } else {
                    continue;
                }
            }

            if(in_array($value, $item)) {
                return true;
            } else if($this->deep_in_array($value, $item)) {
                return true;
            }
        }
        return false;
    }

    /**
     * 打印ajax结果
     *
     * @param $data
     */
    protected function writeAjaxResult($data)
    {
        echo json_encode($data);
        die();
    }

    /**
     * 获取玩家伞下玩家列表
     *
     * @param $playerId
     * @param $underPlayer -玩家列表容器
     * @param int $type 1 递归查询伞下玩家列表 2查询玩家直属玩家
     */
    public function getIdListByPlayerId($playerId,$type = 1){
        $list=[];
        if($type == 1){
            $underPlayerlist = DailiCalc::getAgentList($playerId,'allUnderPlayer');
            $underAgentlist = DailiCalc::getAgentList($playerId,'allUnderPlayer');

            $list = array_merge($underPlayerlist,$underAgentlist);
        }

        if($type == 2){
            $directPlayerList = DailiCalc::getAgentList($playerId,'allDirectPlayer');
            $directAgentList = DailiCalc::getAgentList($playerId,'allDirectDaili');

            $list = array_merge($directPlayerList,$directAgentList);
        }

        return $list;

    }

    /**
     * 获取玩家直属下级列表
     *
     * @param $playerId
     * @return bool|mixed
     */
    public function getDirectPlayers($playerId){
        $memberModel = new PlayerMember();
        $directPlayers = $memberModel->getDataByCon(['parent_id'=>$playerId],"player_id");

        return $directPlayers;
    }

    /**
     * 获取玩家伞下业绩
     *
     * @param $playerIds
     * @param $type查询类型 1今日 2本周 3历史
     */
    public function getPlayerTodayAchievements($playerId,$type,$date=''){
        $redisKey = '';$consume=0;
        $start_time = strtotime(date('Y-m-d'));
        switch ($type){
            case 1:
                if(!$date){
                    $date = date('Ymd');
                }else{
                    $date = date('Ymd',strtotime($date));
                }
                $redisKey = RedisKey::INF_UNDER_DAY_CONSUME.$date;
                break;
            case 2:
                if(!$date){
                    $week_suffix = date('Ymd',strtotime(date('Y-m-d', $start_time)) - date('w',strtotime(date('Y-m-d', $start_time - 86400))) * 86400);
                }else{
                    $week_suffix = date("Ymd",strtotime($date));
                }
                $redisKey = RedisKey::INF_UNDER_WEEK_CONSUME.$week_suffix;
                break;
            case 3:
                $redisKey = RedisKey::INF_UNDER_ALL_CONSUME;
                break;
            default:
                break;
        }
        if($redisKey){
            $consume = Yii::$app->redis->hget($redisKey,$playerId);
        }

        return $consume;
    }

    /**
     * 获取玩家业绩
     *
     * @param $playerId
     * @param int $type 1 历史总业绩 2 当天业绩(date默认为今日) 3 周业绩（date默认为本周 0本周 1上一周，2上两周。。。以此类推）
     */
    public function getConsumeByPlayerId($playerId,$type=1,$date=''){
        $redisKey = '';
        if($type == 1){
            $redisKey = RedisKey::INF_ALL_CONSUME;
        }
        if($type == 2){
            if(!$date){
                $date = date('Ymd');
            }else{
                $date = date('Ymd',strtotime($date));
            }
            $redisKey = RedisKey::INF_DAY_CONSUME.$date;
        }

        if($type == 3){
            if(!$date && $date != 0){
                if($date == 0){
                    //本周
                    $thisMonday = date('Ymd', (time() - ((date('w') == 0 ? 7 : date('w')) - 1) * 24 * 3600));
                    $redisKey = RedisKey::INF_UNDER_WEEK_CONSUME.$thisMonday;
                }else{
                    $type = $type+1;
                    $num = '-'.$type;
                    $monday = date('Ymd', strtotime($num.' monday', time()));
                    $redisKey = RedisKey::INF_UNDER_WEEK_CONSUME.$monday;
                }
            }
        }

        $this->redis = Yii::$app->redis;
        return $this->redis->hget($redisKey,$playerId);
    }

    /**
     * 直属玩家和代理数量
     */
    public function playerAndMemberNums($my_user='')
    {
        if(!$my_user){
            $session = Yii::$app->session;
            $my_user = $session->get('user_id');
        }

        $data = $this->getDailiInfoInterface($my_user);
        $dailiNum = $data['allDirectDaili'];
        $playerNum = $data['allDirectPlayer'];

        return ['player_num' => $playerNum, 'daili_num' => $dailiNum];
    }

    /**
     * 获取下级列表
     *
     * @param $playerId -玩家id
     * @param $type 1 获取下级代理列表 2 获取下级玩家列表
     * @return array
     */
    public function getUnderPlayerList($playerId,$type){
        $list = $this->getIdListByPlayerId($playerId,2);

        $listRes = [];
        $dailiModel = new DailiPlayer();
        foreach ($list as $key=>$val){
            if($type == 1){
                if($dailiModel->getById($val)){
                    $listRes[] = $val;
                }
            }elseif($type == 2){
                if(!$dailiModel->getById($val)){
                    $listRes[] = $val;
                }
            }

        }

        return $listRes;
    }

    /**
     *  参数由数组转为xml
     */
    public function arrayToXml($arr)
    {
        $xml = "<xml>";
        foreach ($arr as $key => $val) {
            $xml .= "<" . $key . ">" . $val . "</" . $key . ">";
            /*if (is_numeric($val)) {
                $xml .= "<".$key.">".$val."</".$key.">";
            } else {
                $xml .= "<".$key."><![CDATA[".$val."]]></".$key.">";
            }*/
        }
        $xml .= "</xml>";
        return $xml;
    }

    /**
     *   作用：使用证书，以post方式提交xml到对应的接口url
     */
    private function curl_post_ssl($url, $vars, $second = 30)
    {
        $ch = curl_init();
        //超时时间　　
        curl_setopt($ch, CURLOPT_TIMEOUT, $second);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);

        /******* 此处必须为文件服务器根目录绝对路径 不可使用变量代替*********/
        curl_setopt($ch, CURLOPT_SSLKEY, "/data/wwwroot/OSS/apiclient_key.pem");
        curl_setopt($ch, CURLOPT_SSLCERT, "/data/wwwroot/OSS/apiclient_cert.pem");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $vars);
        $data = curl_exec($ch);
        file_put_contents('/tmp/wx.log', '\n' . date('Y-m-d H:i:s', time()) . 'curl_data:' . json_decode(json_encode(simplexml_load_string($data)), 1), FILE_APPEND);
        if ($data) {
            curl_close($ch);
            return $data;
        } else {
            $error = curl_errno($ch);
            echo "call faild, errorCode:$error\n";
            curl_close($ch);
            return false;
        }
    }

    /**
     * 获取手机验证码
     *
     */
    public function actionGetPhoneCode()
    {
        $phone = Yii::$app->request->get('phone');
        if (!$phone) {
            return $this->writeResult(Code::CODE_PARAMS_ERROR);
        }
        $code = Sms::randNumber(6);

        $this->redis = Yii::$app->redis_3;
        $this->redis->set('daili_phone_' . $phone, $code);
        $this->redis->expire('daili_phone_' . $phone, 60);

        $content = '代理信息验证码:' . $code . '有限期1分钟【一拳网络】';
        $resJson = Sms::send($phone, $content);
        $res = json_decode($resJson);

        return $this->writeResult($res->error,$res->msg);
    }

    /**
     * 生成签名，规则和微信的规则一样
     *
     * @param $data(值为空的过滤掉)
     * @return bool
     */
    public function getSign($data,$apiKey=''){
        if(!is_array($data) && !empty($data)){
            return false;
        }
        /** 去空 */
        unset($data[array_search('',$data)]);

        ksort($data);
        $str = '';
        foreach ($data as $key=>$val){
            if($str){
                $str .= '&'.$key.'='.$val;
            }else{
                $str .= $key.'='.$val;
            }
        }

        if($apiKey){
            $str .= '&key=' . $apiKey;
        }

        $sign=strtoupper(md5($str));

        return $sign;
    }

    /**
     * 代理数量
     */
    public function dailiNum($players)
    {
        $dailiModel = new DailiPlayer();
        return $dailiModel->getAgentNumByIdList($players);
    }

    /**
     * 获取当前用户user_id
     */
    public function getUserId()
    {
        return $this->session->get('user_id');
    }

    /**
     * 接口调用
     *
     */
    public function getDailiInfoInterface($playerId){
        return DailiCalc::getDailiInfo($playerId);
    }

}