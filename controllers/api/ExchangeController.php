<?php
/**
 * Created by PhpStorm.
 * User: moyu
 * Date: 2018/10/31
 * Time: 20:22
 */

namespace app\controllers\api;

use app\models\LobbyPlayer;
use app\models\Player;
use Yii;
use app\models\Exchange;
use app\models\ExchangeRecord;
use yii\base\Curl;
use yii\db\Exception;
use app\common\Code;

/**
 * * 直兑
 * Class ExchangeController
 */
class ExchangeController extends BaseController
{
    public $config;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->config = Yii::$app->params['wechat_config'];

        $this->accessUrl = Yii::$app->request->hostInfo . "/api/recharge/";
        $this->shareUrl = Yii::$app->request->hostInfo . "/api/wechat-access/check-player";
    }

    public function actionCheckExchangeUser(){
        $this->render('CheckExchangeUser');
    }

    public function checkWhiteList($playerId){
        /** @var  $whiteList */
        $switch = Yii::$app->params['exchange_white_list_switch'];
        if($switch == 1){
            $whiteList = Yii::$app->params['exchange_white_list'];
            if(!in_array($playerId,$whiteList)){
                $this->returnError(Code::ERROR, "功能尚未开通，请更换兑换方式！");
            }
        }
    }

    /**
     * 绑定接口
     * param type 类型 1 银行卡 2支付宝
     * param code 账号
     * param playerId 玩家id
     * param name 玩家姓名
     */
    public function actionBind()
    {
        $request = $this->checkRequestWay();
        if (!$request){
            $this->returnError(Code::REQUEST_ERROR, $this->message);
        }

        $type = $code = $playerId = 0;$name = '';

        if (isset($request['type']) && $request['type']) {
            $type = $request['type'];
        } else {
            Yii::info('type错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_ERROR, $this->message);
        }


        if (!isset($request['code']) || !$request['code']) {
            Yii::info('code错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_ERROR, $this->message);
        }

        $code = $request['code'];$accountName = '';
        if ($type == 2) {//正则匹配银行卡号
            if (!$this->check_bankCard($code)) {
                $this->returnError(Code::BANK_NUMBER_ERROR, '银行卡号不合法');
            } else {
                $name = $this->check_bankCard($code);
                $accountName = $name ? $name : "银行卡";
            }
        } else {
            $accountName = '支付宝';
        }

        if (isset($request['name']) && $request['name']) {
            $name = $request['name'];
        } else {
            Yii::info('name错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_ERROR, $this->message);
        }

        if (isset($request['playerId']) && $request['playerId']) {
            $playerId = $request['playerId'];
        } else {
            Yii::info('playerId错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_ERROR, $this->message);
        }

        if (!$type || !$code || !$playerId || !$name) {
            Yii::info('参数错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_ERROR, $this->message);
        }

        /** 检测白名单 */
        $this->checkWhiteList($playerId);

        $types = Yii::$app->params['bind_type'];
        $typeKey = array_keys($types);
        if (!in_array($type, $typeKey)) {
            Yii::info('类型错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::PARAM_VALUE_ERROR, $this->message);
        }

        $exchangeModel = new Exchange();
//        $checkCodeIsBind = $exchangeModel->getData(['code'=>$code],'player_id',2);
//        if($checkCodeIsBind && $checkCodeIsBind['player_id'] != $playerId){
//            Yii::info('该银行卡号已被绑定');
//            $this->returnError(Code::CODE_HAS_BIND, '该银行卡号已被绑定');
//        }

//        $checkIsBind = $exchangeModel->getData(['player_id'=>$playerId, 'name'=>$name,'type'=>2,'code'=>$code],'code',2);
//        if($checkIsBind){
//            Yii::info('该绑定关系已存在');
//            $this->returnError(Code::BING_RELATION_ERROR, '该绑定关系已存在');
//        }

        $DwdModel = new Exchange();
        if ($DwdModel->setBind($type, $playerId, $code, $name, $accountName)) {
            $return['code'] = Code::OK;
            $return['data'] = [];
            $return['message'] = "绑定成功";

            $this->writeJson($return);
        } else {
            Yii::info('绑定错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::ERROR, '绑定失败');
        }
    }

    /**
     * 直兑（提现）
     * param type 类型 1 银行卡 2支付宝 3微信企业付款
     * param playerId 玩家id
     * param amount 数额
     *
     */
    public function actionExchange()
    {
        Yii::info('直兑开始');
        $request = $this->checkRequestWay();
        if (!$request) {
            $this->returnError(Code::REQUEST_ERROR, $this->message);
        }

        $type = $amount = $playerId = 0;
        if (isset($request['type']) && $request['type']) {
            $type = $request['type'];
        } else {
            $this->returnError(Code::PARAM_ERROR, '参数type错误');
        }

        if (isset($request['amount']) && $request['amount']) {
            $amount = $request['amount'];
        } else {
            $this->returnError(Code::PARAM_ERROR, '参数amount错误');
        }

        if (isset($request['playerId']) && $request['playerId']) {
            $playerId = $request['playerId'];
        } else {
            $this->returnError(Code::PARAM_ERROR, '参数playerId错误');
        }

        Yii::info('验证账号');

        //验证账号
        $code = $this->checkBind($playerId, $type);

        //如果存在未完成的订单，不能再次创建订单
        Yii::info('验证如果存在未完成的订单，不能再次创建订单');
        $this->checkOrder($type,$playerId);

        //创建提现订单
        $conConf = $this->getConByType($type);
        $serviceCharge = $conConf['service_charge'];
        Yii::info("直兑配置读取：".json_encode($conConf));

        //验证金额
        Yii::info('玩家:'.$playerId.',验证金额,本次提现金额：'.$amount);
	    $this->checkAmount($playerId, $amount, $conConf);

        Yii::info('创建提现订单');
        $recordModel = new ExchangeRecord();
	    $data['order_id'] = $this->getOrderId();
	    $data['player_id'] = $playerId;
	    $data['code'] = $code;
	    $data['type'] = $type;
	    $data['amount'] = $amount;
	    $data['service_charge'] = round($amount * $serviceCharge,2);
	    $data['create_time'] = date('Y-m-d H:i:s');
	
	    if(!$recordModel->createRecord($data)){
		    $this->returnError(Code::ORDER_CREATE_ERROR, $this->messages);
	    }

        Yii::info('通知data服减钱');
        $result = $this->disposeGold($playerId, $amount, 2);

        Yii::info("data服返回值：".json_encode($result));
        if(!isset($result['code'])){
            $exchangeRecordModel =  new ExchangeRecord();
            $exchangeRecordModel->updateRecordStatus($data['order_id'],Code::DISPOSE_GOLD_ERROR);
            $this->returnError(Code::DISPOSE_GOLD_ERROR, $this->message);
        }

	    if ($result['success'] && $result['code'] != 2) {

	        switch ($type){
                case 1://银行卡
                    $this->returnOK();
                    break;

                case 2://支付宝
                    $this->returnOK();
                    break;

                case 3://微信
                    $url = $this->shareUrl."?orderId=".$data['order_id'];

                    $exchangeRecordModel =  new ExchangeRecord();
                    $exchangeRecordModel->updateRecordInfo($data['order_id'],['share_url'=>$url]);

                    $this->returnOK(['shareUrl'=>$url]);//返回客户端分享地址

                    break;

                default:
                    break;
            }
	    }else{
            $exchangeRecordModel =  new ExchangeRecord();
            $exchangeRecordModel->updateRecordStatus($data['order_id'],Code::DISPOSE_GOLD_ERROR);
		    $this->returnError(Code::DISPOSE_GOLD_ERROR, $this->message);
	    }
	    
    }

    /**
     * 直兑记录
     *
     */
    public function actionRecord()
    {
        $request = $this->checkRequestWay();
        if (!$request) {
            $this->returnError(Code::REQUEST_ERROR, $this->message);
        }

        if (!isset($request['page']) || !isset($request['limit']) || !isset($request['playerId'])) {
            $this->returnError(Code::PARAM_VALUE_ERROR, $this->message);
        }
        $page = $request['page'];
        $limit = $request['limit'];
        $playerId = $request['playerId'];
        $record = [];
        try {
            $recordModel = new ExchangeRecord();
            $record = $recordModel->getRecordByPage($page, $limit, ['player_id'=>$playerId]);
            foreach ($record as $key=>$val){
                if($val['status'] != 0 && $val['status'] != 1 && $val['status'] != 2){
                    $record[$key]['status'] = 3;
                }
            }
        } catch (Exception $exception) {
            Yii::info('服务器查询错误：' . __CLASS__ . '/' . __METHOD__ . '/' . __LINE__);
            $this->returnError(Code::ERROR, $this->message);
        }
        $this->returnOK($record);
    }

    /**
     * 验证绑定账号
     *
     * @param $playerId
     * @param $type
     */
    public function checkBind($playerId, $type)
    {
        if($type == 3){
            return 0;
        }

        $exchangeModel = new Exchange();

        $res = $exchangeModel->getOne($playerId, $type);

        if (!$res) {
            $this->returnError(Code::NO_BIND, $this->message);
        }

        return $res['code'];
    }

    /**
     * 验证用户金币
     *
     * @param $playerId - 玩家id
     * @param $amount - 提现金额
     * @param $type - 提现类型 1支付宝 2银行卡
     */
    public function checkAmount($playerId, $amount, $con)
    {
        $lobbyModel = new LobbyPlayer();

        if ($amount > $con["up_line"]) {
            $this->returnError(Code::UP_LINE_ERROR, $this->message);
        }

        if ($amount < $con["down_line"]) {
            $this->returnError(Code::DOWN_LINE_ERROR, $this->message);
        }

        $playerInfo = $lobbyModel->getPlayer($playerId);
        if (!$playerInfo || !isset($playerInfo['gold_bar'])) {
            $this->returnError(Code::NO_PLAYER, $this->message);
        }

        //本身最低保留，不可以全部提现
	    if (($playerInfo['gold_bar'] < $amount) || ( ($playerInfo['gold_bar'] - $amount) < $con['minimum_reserve'] )) {
		    $this->returnError(Code::AMOUNT_ERROR, $this->message);
	    }

	    $canExchange = $this->actionCheckExchangeMoney($playerId,$playerInfo['gold_bar'],$amount,$con['over_all_line']);
	    if($amount > $canExchange){
		    $this->returnError(Code::AMOUNT_ERROR, $this->message);
	    }
	
	    return true;
    }

    /**
     * 根据类型获取提现限制条件
     *
     * @param $type
     * @return array
     */
    public function getConByType($type)
    {
        $con=array();
        $exchangeCon = Yii::$app->params['bind_condition'];
        if ($type == 1) {
            $con = $exchangeCon['ali'];
        }

        if ($type == 2) {
            $con = $exchangeCon['bank'];
        }

        if($type == 3) {
            $con = $exchangeCon['wechat'];
        }

        if (!$con) {
            $this->returnError(Code::EXCHANGE_TYPE_ERROR, $this->message);
        }

        return $con;
    }

    /**
     * 查询可提现金额
     *
     * @param $player_index --玩家id
     * @param $selfGold --自身金额
     * @param $amount --本次提现金额
     * @param $allOverLine -- 当日上限
     *
     * @return int
     */
	public function actionCheckExchangeMoney($player_index,$selfGold,$amount,$allOverLine)
	{
        $can_exchange = 0;
		
		//体现中金额
		$lobbyModel = new ExchangeRecord();
		$con=[];
        $con[] = 'player_id='.$player_index;
        $con[] = 'status in(0,2)';
        $con = implode(' and ',$con);
		$exchanging = $lobbyModel->getRecord($con,'sum(amount) as amount',3) ?: 0;

        //今日已提金额
        $where[] =  'player_id='.$player_index;
        $where[] =  'status=1';
        $where[] =  "create_time >= '".date("Y-m-d")."'";
        $where = implode(" and ",$where);
        $hasExchangeAmount = $lobbyModel->getRecord($where,'sum(amount) as amount',3) ?: 0;

        //每日上限
        if(($exchanging + $hasExchangeAmount + $amount) > $allOverLine){
            $this->returnError(Code::OVER_ALL_LINE, $this->message);
        }

//		if($selfGold > $exchanging){
//			$can_exchange = $selfGold-$exchanging;
//		}
        $can_exchange = $selfGold;

        Yii::info("checkExchangeMoney---总金额：".$selfGold.",体现中金额：".$exchanging.', 可提现金额：'.$can_exchange);

        return $can_exchange;
	}
	
	/**
	 * 预下单，存redis待处理
	 *
	 * @param $openid
	 * @param $amount
	 * @param $order_id
	 * @param string $desc
	 */
	public function actionPayExchange($openid, $amount,$order_id, $desc = '活动奖励')
	{
		try{
			$params["mch_appid"] = $this->config['MCH_APPID'];          //公众账号appid
			$params["mchid"] = $this->config['MCHID'];                  //商户号 微信支付平台账号
			$params["nonce_str"] = 'yiquan' . mt_rand(100, 999);        //随机字符串
			$params["partner_trade_no"] = $order_id;                    //商户订单号
			$params["amount"] = $amount;                                //金额
			$params["desc"] = $desc;                                    //企业付款描述
			$params["openid"] = $openid;                                //用户openid
			$params["check_name"] = 'NO_CHECK';                         //不检验用户姓名
			$params["spbill_create_ip"] = $_SERVER['SERVER_ADDR'];      //ip


            $data = $this->getWechatPostData($params);

			Yii::info('写入提现队列信息:'.json_encode($data));
			$redis = Yii::$app->redis_3;
			$redis->lpush($this->config['PAY_EXCHANGE_MONEY'],json_encode($data,JSON_UNESCAPED_UNICODE));
			$exchangeRechangeModel = new ExchangeRecord();
			$exchangeRechangeModel->updateRecordInfo($order_id,['redis_status'=>1]);

            return true;
		}catch (\Exception $exception){
			throw new Exception('加入队列失败！');
		}
	}

    /**
     * 直兑验证只能由一个未完成的订单
     *
     * @param $type
     * @param $playerId
     * @return bool
     */
	public function checkOrder($type,$playerId)
    {
        Yii::info("验证是否存在微信的未完成的直兑订单！");
        if(!$type || !$playerId){
            return false;
        }

        switch ($type){
            case 3:
                $exchangeRecordModel = new ExchangeRecord();
                $res = $exchangeRecordModel->getRecord(['status'=>0,'player_id'=>$playerId,'type'=>3],'id,order_id,share_url',2);
                if($res && isset($res['share_url']) && $res['share_url']){
                    Yii::info("存在微信的未完成的直兑订单,重新返回 ！");
                    $this->returnOK(['shareUrl'=>$res['share_url']]);
                }
                break;
            default:
                break;
        }

        return true;
    }


}